{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let startNewRoundHeight = 5
let idGameToken = base58'GHNWENeTrbHDb6yog9unotnSJtjdUSoidgb28Wu77ika'
let addressOwner = "3M6crppcfPBXitdAxxdT94QnqnCgo2S4gdy"
let minBet = 100000
let maxNumberRound = 8

# create random hash for last round
func randomizer(inv: Invocation) = {
    let lastPlay = match getBinary(this, "lastPlay") {
        case s:ByteVector => s
        case a:Unit => base64'V2F2ZXNMb3R0b1Yy'
    }
    let rand = lastPlay + inv.transactionId + inv.callerPublicKey + lastBlock.generationSignature + toBytes(lastBlock.timestamp) + toBytes(lastBlock.height)
    sha256(rand)
}

func getIntValue(keyStorage: String, defaultValue: Int) = {
    match getInteger(this, keyStorage) {
      case a:Int => a
      case _ => defaultValue
    }
}

func getBoolValue(keyStorage: String, defaultValue: Boolean) = {
    match getBoolean(this, keyStorage) {
      case b:Boolean => b
      case _ => defaultValue
    }
}

func getPrevNumberGame() = {
  getIntValue("numberGame", 1) - 1
}

func getCurrentGameAndRound() = {
  getIntValue("numberGame", 1).toString() + "_" + getIntValue("numberRound", 1).toString()
}

func getCurrentGameAndPrevRound() = {
  let prevRound = getIntValue("numberRound", 1) - 1
  getIntValue("numberGame", 1).toString() + "_" + prevRound.toString() + "_"
}
func saveWinnerInfoPrevRound(currRound: Int, winnerFlag: String, randhash: Int) = {
   WriteSet([
      DataEntry(getCurrentGameAndPrevRound() + "lastRoundWinner", getCurrentGameAndPrevRound() + winnerFlag ),
      DataEntry("numberRound", currRound) ,
      DataEntry("startGame", true),
      DataEntry("randhash", randhash)
      ]
    )
}
func setWinnersPrevRound(currRound: Int, randhash: Int) = {
  if (randhash < 500) then
    saveWinnerInfoPrevRound(currRound,"less_", randhash)
  else
    saveWinnerInfoPrevRound(currRound, "more_", randhash)
}

func getGamerBet(addressGamer: String, direction: String) = {
  getIntValue(getCurrentGameAndRound() + "_" + direction + "_" + addressGamer, 0)
}
func defineWinnerSign(hash: Int) = {
  if(hash <= 500) then
    "tails"
  else
    "eagle"
}

func defineCoinPart(part: String) = {
  if(part == "_less_") then
    "tails"
  else
    "eagle"
}

func finalRoundBet(directionRate: String, pmt: Int, addressGamer: String, directionGamer: String,
 numberGame: String, numOfGamersCurrDirection: Int, sumOfBank: Int, sumGamerBets: Int) = {
    let countPrizers = getIntValue(numberGame + "_" + defineCoinPart(directionRate) + "_Prizers", 0)
    let numberGameAndLastRound = numberGame + "_" + (maxNumberRound - 1).toString()
      WriteSet([
        DataEntry(numberGameAndLastRound + directionRate + addressGamer, pmt),
        DataEntry(numberGameAndLastRound + directionGamer, numOfGamersCurrDirection + 1),
        DataEntry(numberGame + "_BankOfGame", sumOfBank + pmt),
        DataEntry(numberGame + "_" + addressGamer, sumGamerBets + pmt),
        DataEntry(numberGame + "_" + addressGamer + "_" + defineCoinPart(directionRate) + "_HasPrize", true),
        DataEntry(numberGame + "_" + defineCoinPart(directionRate) + "_Prizers", countPrizers + 1)
      ])
}

func setGamerBet(addressGamer: String, directionRate: String, directionGamer: String, currentBet: Int) = {
    let newNumberOfRound = getIntValue("numberRound", 1)
    let numberGame = getIntValue("numberGame", 1).toString()
    let numOfGamersCurrDirection = getIntValue(getCurrentGameAndRound() + directionGamer, 0)
    let sumOfBank = getIntValue(numberGame + "_BankOfGame", 0)
    let sumGamerBets = getIntValue(numberGame + "_" + addressGamer, 0)    
    if(maxNumberRound == newNumberOfRound + 1) then
      finalRoundBet(directionRate, currentBet, addressGamer,
        directionGamer, numberGame, numOfGamersCurrDirection, sumOfBank, sumGamerBets)
    else
    WriteSet([
      DataEntry(getCurrentGameAndRound() + directionRate + addressGamer, currentBet),
      DataEntry(getCurrentGameAndRound() + directionGamer, numOfGamersCurrDirection + 1),
      DataEntry(numberGame + "_BankOfGame", sumOfBank + currentBet),
      DataEntry(numberGame + "_" + addressGamer, sumGamerBets + currentBet)
      ])
}

func getBet(round: Int, addressGamer: String) =  {

  if(round > 1 ) then {
    let winnerOfPrevRound = getCurrentGameAndPrevRound()
    let winnerBetFromPrevRound = getIntValue(winnerOfPrevRound + addressGamer, 0)
    let ratesGamerInGame = getIntValue(getIntValue("numberGame", 1).toString() + "_" + addressGamer, 0)
    if(winnerBetFromPrevRound != 0) then
       minBet
    else if (winnerBetFromPrevRound == 0 && ratesGamerInGame != 0) then
      minBet # * round * 2  - ratesGamerInGame
    else if (winnerBetFromPrevRound == 0 && ratesGamerInGame == 0) then
      minBet * round * 2
    else
      minBet
  }
  else
    minBet
}

func isOppositeRate(numberOfRound: Int) = {
    let numberOfGamersUp = getIntValue(getIntValue("numberGame", 1).toString() + "_" + numberOfRound.toString() + "_countGamersUp", 0)
    let numberOfGamersDown = getIntValue(getIntValue("numberGame", 1).toString() + "_" + numberOfRound.toString() + "_countGamersDown", 0)
    numberOfGamersUp > 0 && numberOfGamersDown > 0
}

func getNextNumberGame() = {
  match getInteger(this, "numberGame") {
    case a:Int => a + 1
    case _ => 1
  }
}
func countValuePrize(winnerSign: String) = {
    let currentNumberGame = getIntValue("numberGame", 1).toString()
    let countPrizers = getIntValue(currentNumberGame + "_" + winnerSign + "_Prizers", 0)
    let bankTheGame = getIntValue(currentNumberGame + "_BankOfGame", 0)
    ((bankTheGame - bankTheGame / 10) / countPrizers)
}

func saveDataStartGame(numberGame: Int, isGameStarted: Boolean, numberOfRound: Int ) = {
 WriteSet([
      DataEntry("numberGame", numberGame),
      DataEntry("startGame", isGameStarted),
      DataEntry("numberRound", numberOfRound),
      DataEntry(numberGame.toString() + "_BankOfGame", 0)
      ])
}

func saveFinishGame(winnerSign: String, prizeValue: Int, newNumberOfRound: Int) = {
  let currentNumberGame = getIntValue("numberGame", 1).toString()
  let bankTheGame = getIntValue(currentNumberGame + "_BankOfGame", 0)
  let incomeOfOwner = bankTheGame / 10
  WriteSet([
    DataEntry(currentNumberGame + "_GameOver", true),
    DataEntry(currentNumberGame + "_WinnerSign", winnerSign),
    DataEntry(currentNumberGame + "_PrizeValue", prizeValue),
    DataEntry(currentNumberGame + "_IncomeOfOwner", incomeOfOwner),
    DataEntry("numberRound", newNumberOfRound),
    DataEntry("numberGame", getNextNumberGame())
  ])
}
@Callable(i)
func maxBet(directionRate: String,directionGamer: String,
 numberGame: String, numOfGamersCurrDirection: Int, sumOfBank: Int) = {
  let pmt = extract(i.payment)
  let addressGamer = toBase58String(i.caller.bytes)
  finalRoundBet(directionRate, pmt.amount, addressGamer, directionGamer,
    numberGame, numOfGamersCurrDirection, sumOfBank, pmt.amount)
}
@Callable(i)
func startRound() = {
  let numberOfRound = getIntValue("numberRound", 1)
  let prev = numberOfRound - 1
  let randhash = randomizer(i)
  let isGameStarted = getBoolValue("startGame", false)
  let currentNumberGame = getIntValue("numberGame", 1)
  if(i.caller != this) then
    throw("Only owner can start the game.")
  else if( numberOfRound == 1 && !isOppositeRate(numberOfRound) && i.caller == this && !isGameStarted ) then

    #invoke script
    # setGameOver(currentNumberGame)  ?
    # let newNumberGame = currentNumberGame
    saveDataStartGame(currentNumberGame, !isGameStarted, numberOfRound)
  else if (i.caller == this && isOppositeRate(prev) && !isGameStarted) then
    setWinnersPrevRound(numberOfRound, randhash.toInt() % 1000)
  else if (numberOfRound == 0 && currentNumberGame >= 1) then
    saveDataStartGame(currentNumberGame, !isGameStarted, numberOfRound + 1)
  else if( numberOfRound > 1 && isOppositeRate(prev) && i.caller == this && !isGameStarted ) then
    WriteSet([
      DataEntry("startGame", !isGameStarted)
    ])
  else
    WriteSet([
      DataEntry("startGame", isGameStarted)
    ])
}

@Callable(i)
func stopGame() = {
  let isGameStarted = getBoolValue("startGame",false)
  #isOppositeRate() &&  && !isGameStarted
  let lastRound = getIntValue("numberRound", 1)
  let newNumberOfRound = (lastRound + 1) % maxNumberRound


  if(i.caller == this && newNumberOfRound > 1 && isOppositeRate(lastRound)) then
    WriteSet([
      DataEntry("numberRound", newNumberOfRound)
    ])
  else if (newNumberOfRound >= 1) then
      let newGame = getNextNumberGame()
      saveDataStartGame(newGame, isGameStarted, newNumberOfRound)
  else if (newNumberOfRound == 0) then {
    let randhash = randomizer(i)
    let winnerSign = defineWinnerSign(randhash.toInt() % 1000)
    let prizeValue = countValuePrize(winnerSign)
    saveFinishGame(winnerSign, prizeValue, newNumberOfRound)
  }
  else
    throw("Only owner can stop the game")
}

@Callable(i)
func makeBetLess() = {
  let isGameStarted = getBoolValue("startGame", false)
  let pmt = extract(i.payment)
  let addressGamer = toBase58String(i.caller.bytes)
  let currentRound = getIntValue("numberRound",  1)
  let countBet = getBet(currentRound, addressGamer)
  let gamerAlreadyOppositeBet = getGamerBet(addressGamer, "more")
  if (gamerAlreadyOppositeBet != 0 || pmt.assetId != idGameToken) then
    throw("The gamer already made opposite a bet in the round!")
  else if(countBet > pmt.amount) then
    throw("Payment must be more for the round!" + countBet.toString() + pmt.amount.toString() + currentRound.toString() + addressGamer)
  else if (gamerAlreadyOppositeBet == 0 && pmt.assetId == idGameToken && countBet <= pmt.amount && isGameStarted) then
    setGamerBet(addressGamer, "_less_", "_countGamersDown", pmt.amount)
  else
    throw("Less throw"+ gamerAlreadyOppositeBet.toString() + countBet.toString() + pmt.amount.toString() + isGameStarted.toString())
}

@Callable(i)
func makeBetMore() = {
  let isGameStarted = getBoolValue("startGame", false)
  let pmt = extract(i.payment)
  let addressGamer = toBase58String(i.caller.bytes)
  let currentRound = getIntValue("numberRound", 1)
  let countBet = getBet(currentRound, addressGamer)
  let gamerAlreadyOppositeBet = getGamerBet(addressGamer, "less")
  if (gamerAlreadyOppositeBet != 0 || pmt.assetId != idGameToken) then
    throw("The gamer already made opposite bet in the round! Or send not true tokens" + gamerAlreadyOppositeBet.toString() + " " +  (pmt.assetId == idGameToken).toString())
  else if(countBet > pmt.amount) then
    throw("Payment must be more for the round!" + countBet.toString() + pmt.amount.toString() + currentRound.toString() + addressGamer)
  else if (gamerAlreadyOppositeBet == 0 && pmt.assetId == idGameToken && countBet <= pmt.amount && isGameStarted) then
    setGamerBet(addressGamer, "_more_", "_countGamersUp", pmt.amount)
  else
    throw("More throw"+ gamerAlreadyOppositeBet.toString() + countBet.toString() + pmt.amount.toString() + isGameStarted.toString())
}

@Callable(i)
func withdraw(numberGame: String) = {
  let addressOfRecipient = toBase58String(i.caller.bytes)
  # проверяем закончилась ли эта игра, есть ли этот адрес в победителях, не забрал ли уже этот
  # адрес приз из этой игры, получаем значение приза проверяем больше ли баланс чем приз, и пересылаем на адрес,
  # отнимаем из общей суммы призов, помечаем что адрес получил приз
  let isGameOver = getBoolValue(numberGame + "_GameOver", false)
  # получаем орел или решка победили в игре а может число
  let winnerSign = match(this.getString(numberGame + "_WinnerSign")) {
    case a:String => a
    case _ => ""
  }
  # change address owner have to not equals this
  if(addressOfRecipient == addressOwner) then
    let incomeOfOwner = getIntValue(numberGame + "_IncomeOfOwner",  0)
    ScriptResult(
        WriteSet([
                DataEntry(numberGame + "_IncomeOfOwner", 0)
            ]),
        TransferSet([ScriptTransfer(i.caller, incomeOfOwner, idGameToken)])
      )
  else if(i.caller != this) then
    # проработать как получить адрес победителя, создавать на последнем раунде запись адресов
    # орел/решка и теперь запрашивать по ключам номера игры и победной решки/_HasPrizen + "_HasPrize", false)
    let valuePrize = getIntValue(numberGame + "_PrizeValue",  0)
    let bankOfGame = getIntValue(numberGame + "_BankOfGame",  0)
    let isHasPrize = getBoolValue(numberGame + "_" + addressOfRecipient + "_" + winnerSign + "_HasPrize", false)
    if(isGameOver && isHasPrize && bankOfGame >= valuePrize) then
      let sumBankAfterWithdraw = bankOfGame - valuePrize
      ScriptResult(
        WriteSet([
                DataEntry(numberGame + "_" + addressOfRecipient + "_" + winnerSign + "_HasPrize", false),
                DataEntry(numberGame + "_BankOfGame", sumBankAfterWithdraw)
            ]),
        TransferSet([ScriptTransfer(i.caller, valuePrize, idGameToken)])
      )
    else
      throw("The address is not the winner" + isGameOver.toString() + isHasPrize.toString() +  bankOfGame.toString() + valuePrize.toString() )
  else
    throw("Some error in withdraw operation")
}

@Verifier(tx)
func verify() = {
    match(tx) {
        case t:DataTransaction => true # should be false for production
        case t:SetScriptTransaction => true # should be false for production
        case _ => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
}
